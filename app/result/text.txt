Maintenant qu'on a vu les fonctions, tu devrais mieux comprendre les diff√©rentes fonctions qu'on a vues jusqu'√† maintenant !

Car tu peux cr√©er une infinit√© de fonctions, mais JavaScript te propose d√©j√† de nombreuses fonctions.

Ce qu'on a d√©j√† vu : 

- `"salut".toUpperCase()` : transforme le texte en majuscule
- `"salut".toLowerCase()` : transforme le texte en minuscule
- `Math.abs(-4)` : transforme un nombre en positif
- `Math.isNaN(NaN)` : v√©rifie si une variable est `NaN` (not a number)

Et bien d'autres encore !

J'ai envie, dans ce dernier cours sur les fonctions, de d√©couvrir quelques objets qui contiennent des fonctions.

## Date

`Date` est un module en JavaScript qui permet d'interagir avec des... dates üéâ

Pour l'utiliser, il faut cr√©er une nouvelle instance de `Date` :

```js
// Par d√©faut, ce sera la date du jour
const date = new Date();
```

<Caption emoji="üé≤">
La syntaxe `new Date()` est une syntaxe qui permet de cr√©er une nouvelle instance d'un objet. On verra √ßa plus tard lorsqu'on parlera de la programmation orient√©e objet.

Mais ce qu'il faut comprendre c'est que `new Date()` est une fonction qui va cr√©er un nouvel objet `Date`.

Cet objet Date va contenir des informations sur la date actuelle et nous permettre d'int√©ragir avec.
</Caption>

En JavaScript, les dates sont stock√©es sous forme de timestamp. C'est √† dire que la date est stock√©e sous forme de nombre de millisecondes depuis le 1er janvier 1970.

1 minute = 60 secondes = 60 000 millisecondes

<Question id="3.functions-5.func-built-in.1" correct="312 000 millisecondes">
Quelle sera la timestamp pour la date de **1er janvier 1970 √† 00h05 et 12 secondes ?
</Question>

C'est pas tr√®s utile de savoir √ßa, mais c'est important de le savoir pour comprendre comment fonctionne les dates en JavaScript.

Avec cette class `Date`, on va pouvoir manipuler des dates.

<Playground
template="test-ts"
activeFile="current.test.ts"
size="medium"
mode="both"
files={{
"add.test.ts": {
code: ``,
      hidden: true
    },
    "current.test.ts": `const date = new Date("2021-09-15");

// ü¶Å Utilise date.getTime();
const timestamp = 1;
// ü¶Å Utilise date.toLocaleString();
const toDateString = ""

/* - Ne pas modifier - */
describe("date", () => {
  test("timestamp", () => {
    expect(timestamp).toBe(1631664000000);
  });
  test("date string", () => {
    expect(toDateString).toBe("9/15/2021, 7:00:00 AM")
  });
});`
}}
/>

Comme tu le vois, on vient transformer notre objet Date en timestamp ou en string via **des m√©thodes**.

Les **m√©thodes** sont un autre type de fonctions. Mais au lieu d'√™tre une fonction qui est ind√©pendante, la m√©thode est une fonction qui est li√©e √† un objet (ici la `Date`)

### Exercice

Avec ces dates, il est possible de faire des calculs !

En utilisant les timestamps, tu peux calculer le temps entre deux dates. C'est la mission que tu dois r√©aliser dans la function `getElapsedTimeInSeconds`.

Comme le nom l'indique, tu dois retourner le temps √©coul√© entre deux dates en secondes et pas en millisecondes !

‚ö†Ô∏è Il faut arrondir le r√©sultat √† l'entier le plus proche.


<Playground
template="test-ts"
activeFile="current.test.ts"
size="medium"
mode="both"
files={{
"add.test.ts": {
code: ``,
      hidden: true
    },
    "current.test.ts": `const getElapsedTimeInSeconds = (date1, date2) => {
  // ü¶Å R√©cup√®re le timestamp de chaque date

  // ü¶Å Calcule le temps √©coul√© entre les deux dates

  // ü¶Å Retourne le temps √©coul√© en secondes

  return 0;
};

/* - Ne pas modifier - */
describe("getElapsedTimeInSeconds", () => {
  test("time 1", () => {
    const date1 = new Date("2021-10-15");
    const date2 = new Date("2021-09-15");
    const elapsedTime = getElapsedTimeInSeconds(date1, date2);

    expect(elapsedTime).toBe(2592000);
  });

  test("time 2", () => {
    const date1 = new Date("2019-10-15");
    const date2 = new Date("2019-10-20");
    const elapsedTime = getElapsedTimeInSeconds(date1, date2);

    expect(elapsedTime).toBe(432000);
  });

  test("time 3", () => {
    const date1 = new Date("2000-1-10");
    const date2 = new Date("2000-1-11");
    const elapsedTime = getElapsedTimeInSeconds(date1, date2);

    expect(elapsedTime).toBe(86400);
  });
});`
}}
/>

<ShowMore label="Tips 1">
Pour r√©cup√©rer le timestamp d'une date, tu peux utiliser la m√©thode `getTime()`.
</ShowMore>

<ShowMore label="Tips 2">
Pour calculer le temps entre 2 dates, tu peux soustraire les deux timestamps.

Ensuite, tu pourras utiliser `Math.abs` pour retourner un positif, peu importe l'ordre des deux dates.
</ShowMore>

<Spoiler title="Solution">

<video id="mo3-5.getElapsedTime-solution">

```js
const getElapsedTimeInSeconds = (date1, date2) => {
  const date1Time = date1.getTime();
  const date2Time = date2.getTime();

  const elapsedTime = date2Time - date1Time;

  return Math.round(Math.abs(elapsedTime) / 1000);
};
```

</Spoiler>

Il y a √©videmment pleins d'autres m√©thodes sur les dates, mais tu les d√©couvriras seul ou durant les prochains exercices.

## JSON

`JSON` est un module en JavaScript qui permet d'int√©ragir avec des... JSON üéâ

Mais cette fois, pas besoin de cr√©er une nouvelle instance. On peut directement utiliser les fonctions sur l'objet `JSON`.

Le JSON est un format de donn√©es tr√®s utilis√© pour √©changer des donn√©es entre des applications.

* [Le format JSON](https://www.youtube.com/watch?v=MhzKr1ZA-HA) : vid√©o r√©cente de Grafikart

En JavaScript il est important de pouvoir transformer un JSON en objet et inversement.

Pour √ßa, on va utiliser les m√©thodes `JSON.parse` et `JSON.stringify`.

`JSON.parse` permet de transformer une **string** en un objet valide.

`JSON.stringify` permet de transformer un objet en une **string**.

<Caption emoji="üõ∏">
On a pas encore vu les **objets** ensemble, mais c'est un type de donn√©es qui permet de stocker des informations sous forme de cl√©/valeur.

```js
const obj = {
  name: "Lionel",
  age: 25,
  isStudent: true,
  hobbies: ["coding", "music", "sport"]
}
```

On verra toutes les sp√©cificit√©s des objets dans un prochain chapitre.
</Caption>



<Playground
template="test-ts"
activeFile="current.test.ts"
size="medium"
mode="both"
files={{
"add.test.ts": {
code: ``,
      hidden: true
    },
    "current.test.ts": `const obj = { name: "BeginJavaScript" }

// ü¶Å Utilise JSON.stringify pour transformer l'objet en string
const toJson = ""

console.log(toJson)

/* - Ne pas modifier - */
describe("JSON", () => {
  test("toJson", () => {
    expect(toJson).toBe('{"name":"BeginJavaScript"}')
  })
});
`
}}
/>

Normalement, tu verras l'objet sous forme de string dans la console. Pour t'amuser, tu peux ajouter 2 param√®tres `JSON.stringify(obj, null, 2)` et regarde ce que √ßa donne !

<Spoiler title="R√©sultat">

Avant, tu aurais du voir ceci dans la console : 

```txt
{"name":"BeginJavaScript"}
```

Mais quand tu passes le param√®tre `null` suivi de 2, tu viens indiquer √† `JSON.stringify` que tu veux afficher l'objet avec une indentation de 2 espaces.

```txt
{
  "name": "BeginJavaScript"
}
```

Un peu plus joli ? 

Retrouve toutes les informatiosn sur les JSON dans [la documentation MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) !

</Spoiler>

`JSON.parse` fait la m√™me chose mais dans l'autre sens. Il transforme une string en objet.

<Caption emoji="‚ö†Ô∏è">

`JSON.stringify` et `JSON.parse` ne fonctionnent pas que sur des objets. Tu peux aussi transformer des [tableaux](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), des string ou m√™me des number !

</Caption>

## Conclusion

Les fonctions sont au coeur de JavaScript, tu int√©ragis constamment avec des fonctions, que ce soit celles que tu as cr√©√©s ou directement les fonctions propos√©es dans JavaScript.

Dans les prochains module, on verra comment manipuler des tableaux avec justement des fonctions et des boucles.

## Quiz

<Quiz 
  id="3.functions-5.func-built-in.2"
  correctAnswerIndex={2} 
  correctAnswer="La m√©thode est toujours li√©e √† un objet alors que la fonction est ind√©pendante !"
  answers={[
    "Aucune",
    "La m√©thode n'est li√©e √† rien alors que la fonction est li√©e √† un objet",
    "La m√©thode est li√©e √† un objet alors qu'une fonction est ind√©pendante",
    "Tout est ind√©pendant"
  ]}>

Quelle est la diff√©rence entre une m√©thode et une fonctoin ?

</Quiz>

<Question id="3.functions-5.func-built-in.3" correct=".getTime()">
Quel est la m√©thode qui permet de r√©cup√©rer le timestamp d'une date ?
</Question>

<Question id="3.functions-5.func-built-in.4" correct="Il permet de formatter le JSON avec des tabs.">
Que fait le troisi√®me param√®tre de `JSON.stringify` ?
</Question>

<Question id="3.functions-5.func-built-in.5" correct="new Date()">
Comment cr√©er un objet `Date` avec la date du jour ?
</Question>

<Quiz 
  id="3.functions-5.func-built-in.6"
  correctAnswerIndex={[1, 3]} 
  correctAnswer="La m√©thode parse vient 'parser' la string, que ce soit un number, une string, un boolean ou autre, il va le transformer dans sa valeur d'origine. C'est pour √ßa que les deux r√©ponses sont correctes. Il transforme une string en... n'importe quoi !"
  answers={[
    "Il permet de transformer un objet en string",
    "Il permet de transformer une string en number",
    "Il permet de transforemr un objet en number",
    "Il permet de transforemr une string en objet"
  ]}>

A quoi sert `JSON.parse()` ?

</Quiz>
